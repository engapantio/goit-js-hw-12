{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://pixabay.com';\n\nexport default async function getImagesByQuery(query, page) {\n  const details = await axios.get('/api/', {\n    params: {\n      key: '51453441-8ba936d16adf232cd1ca4d1fd',\n      q: query,\n      image_type: 'photo',\n      orientation: 'horizontal',\n      page: page,\n      per_page: 15,\n      safesearch: true,\n    },\n  });\n\n  return details.data;\n}\n\n/*\nУ файлі pixabay-api.js зберігай функції для виконання HTTP-запитів:\n\ngetImagesByQuery(query, page). Ця функція повинна приймати два параметри query (пошукове слово, яке є рядком) та page (номер сторінки, яка є числом), здійснювати HTTP-запит і повертати значення властивості data з отриманої відповіді.\n\n\n\nВикористовуй код із домашньої роботи попереднього модуля та застосуй синтаксис async/await для роботи з асинхронними запитами. Виконай рефакторинг свого коду.\n\n\n\nПагінація\n\n\n\nPixabay API підтримує пагінацію та надає параметри page і per_page. Зроби так, щоб у кожній відповіді при пошуку зображень приходило 15 об'єктів (за замовчуванням 20).\n\nПочаткове значення параметра page повинно бути 1.\nЗ кожним наступним запитом його необхідно збільшити на 1.\nУ разі пошуку за новим ключовим словом значення page потрібно повернути до початкового, оскільки буде пагінація для нової колекції зображень.\n\n\nДодай в HTML-документі після галереї розмітку кнопки з текстом Load more, за кліком на яку необхідно виконувати запит за наступною групою зображень і додавати розмітку до вже існуючих елементів галереї. Для цього при сабміті форми тобі необхідно зберігати те, що ввів користувач у глобальну змінну.\n\n\n\nПоки в галерії нема зображень, кнопка повинна бути прихована.\nПісля того як у галереї з'являються зображення, кнопка з'являється в інтерфейсі під галереєю.\nПри повторному сабміті форми кнопка спочатку ховається, а після отримання результатів запиту знову відображається за потреби.\nПеренеси індикатор завантаження під кнопку завантаження додаткових зображень.\n\n\n\nВикористовуй код із домашньої роботи попереднього модуля та доповни код застосунку пошуку зображень новим функціоналом.\n\nПагінація\n\n\n\nPixabay API підтримує пагінацію та надає параметри page і per_page. Зроби так, щоб у кожній відповіді при пошуку зображень приходило 15 об'єктів (за замовчуванням 20).\n\nПочаткове значення параметра page повинно бути 1.\nЗ кожним наступним запитом його необхідно збільшити на 1.\nУ разі пошуку за новим ключовим словом значення page потрібно повернути до початкового, оскільки буде пагінація для нової колекції зображень.\n\n\n\n*/\n","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst galleryItemLarge = new SimpleLightbox('.gallery a', {\n  animationSpeed: 350,\n  captionsData: 'alt',\n  captionDelay: 150,\n  widthRatio: 0.9,\n});\n\nexport function createGallery(images) {\n  const markup = images\n    .map(\n      image => `<li class=\"gallery-item\">\n      <a href=\"${image.largeImageURL}\">\n        <img class=\"gallery-image\" src=\"${image.webformatURL}\" alt=\"${image.tags}\">\n        <ul class=\"photo-details\">\n          <li>\n            <p>Likes</p>\n            <p>${image.likes}</p>\n          </li>\n          <li>\n            <p>Views</p>\n            <p>${image.views}</p>\n          </li>\n          <li>\n            <p>Comments</p>\n            <p>${image.comments}</p>\n          </li>\n          <li>\n            <p>Downloads</p>\n            <p>${image.downloads}</p>\n          </li>\n        </ul>\n      </a>\n    </li>`\n    )\n    .join('');\n\n  document.querySelector('ul.gallery').insertAdjacentHTML('beforeend', markup);\n  galleryItemLarge.refresh();\n}\n\nexport function clearGallery() {\n  document.querySelector('ul.gallery').innerHTML = '';\n}\n\nexport function showLoader() {\n  document.querySelector('.loader').classList.add('js-loader');\n}\n\nexport function hideLoader() {\n  document.querySelector('.loader').classList.remove('js-loader');\n}\n\nexport function showLoadMoreButton() {\n  document.querySelector('.js-load-more').classList.add('load-more-btn');\n}\n\nexport function hideLoadMoreButton() {\n  document.querySelector('.js-load-more').classList.remove('load-more-btn');\n}\n\n// Перед пошуком за новим ключовим словом необхідно повністю очищати вміст галереї, щоб не змішувати результати запитів.\n\n/*\nУ файлі render-functions.js створи екземпляр SimpleLightbox для роботи з модальним вікном та зберігай функції для відображення елементів інтерфейсу:\n\ncreateGallery(images). Ця функція повинна приймати масив images, створювати HTML-розмітку для галереї, додавати її в контейнер галереї та викликати метод екземпляра SimpleLightbox refresh(). Нічого не повертає.\nclearGallery(). Ця функція нічого не приймає та повинна очищати вміст контейнера галереї. Нічого не повертає.\nshowLoader(). Ця функція нічого не приймає, повинна додавати клас для відображення лоадера. Нічого не повертає.\nhideLoader(). Ця функція нічого не приймає, повинна прибирати клас для відображення лоадера. Нічого не повертає.\nshowLoadMoreButton(). Ця функція нічого не приймає, повинна додавати клас для відображення кнопки Load more. Нічого не повертає.\nhideLoadMoreButton(). Ця функція нічого не приймає, повинна прибирати клас для відображення кнопки Load more. Нічого не повертає.\n\n\nБібліотека SimpleLightbox\n\n\n\nДодай відображення великої версії зображення з бібліотекою SimpleLightbox для повноцінної галереї.\n\n\nУ розмітці необхідно буде обгорнути кожну картку зображення в посилання, як зазначено в документації в секції Markup.\nБібліотека містить метод refresh(), який обов'язково потрібно викликати щоразу після додавання нових елементів до галереї.\n\n\nРобота модального вікна пов'язана з самою галереєю, тому використання бібліотеки SimpleLightbox і методу екземпляру refresh() буде доцільним у файлі render-functions.js.\n\n\nДодай в HTML-документі після галереї розмітку кнопки з текстом Load more, за кліком на яку необхідно виконувати запит за наступною групою зображень і додавати розмітку до вже існуючих елементів галереї. Для цього при сабміті форми тобі необхідно зберігати те, що ввів користувач у глобальну змінну.\n\n\n\n\n\nПрокручування сторінки\n\n\n\nЗроби плавне прокручування сторінки після запиту і відтворення кожної наступної групи зображень. Для цього отримай у коді висоту однієї карточки галереї, використовуючи функцію getBoundingClientRect. Після цього використовуй метод window.scrollBy для прокрутки сторінки на дві висоти карточки галереї.\n\n\n\n\nНа що буде звертати увагу ментор при перевірці:\n\n\n\nДомашня робота містить два посилання: на вихідні файли і живу сторінку на GitHub Pages\nПроєкт зібраний за допомогою Vite\nКонсоль в інструментах розробника не містить помилок, попереджень і консоль логів\nЕлементи на сторінці стилізовані згідно з макетом (або власні стилі)\nПроєкт містить код із попередньої ДЗ\nУ файлі pixabay-api.js є функція getImagesByQuery(query, page) для виконання HTTP-запитів\nУ файлі render-functions.js створено екземпляр SimpleLightbox та є функції для відображення елементів інтерфейсу: createGallery(images), clearGallery(), showLoader(), hideLoader(), showLoadMoreButton(), hideLoadMoreButton()\nУ файлі main.js описана вся логіка роботи додатку\nУсі асинхронні запити відрефакторені і реалізовані за допомогою синтаксиса async/await\nЗа один запит у відповідь приходить 15 елементів\nНові зображення додаються в DOM за одну операцію\nНа сторінці під галереєю міститься кнопка Load more, при кліку на яку відправляється запит на наступну сторінку\nПісля додавання нових елементів до списку зображень на екземплярі SimpleLightbox викликається метод refresh()\nКоли користувач отримує результати за максимально можливою сторінкою для конкретного пошукового слова, тобто вже немає чого підвантажувати, кнопка Load more зникає і з’являється відповідне повідомлення\nПри кожному новому сабміті форми номер сторінки скидається до дефолтного 1 і результати попередніх запитів зникають\nПри кліку на маленьке зображення в галереї відкривається його збільшена версія у модальному вікні з використанням бібліотеки SimpleLightbox\n\n*/\n","// _-_-_-_ import -_-_-__ //\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport 'modern-normalize/modern-normalize.css';\nimport getImagesByQuery from './js/pixabay-api';\nimport * as rendered from './js/render-functions';\n\n// ;:;:;:;   initialize variables    :;:;:;: //\n\nconst closeSVGLink = new URL('./img/x-octagon.svg', import.meta.url).href;\nconst searchForm = document.querySelector('form.form');\nconst loadMoreBtn = document.querySelector('button.js-load-more');\nconst perPage = 15;\nlet totalPages = NaN;\nlet queryText = '';\nlet page;\nlet loadMoreQueryText;\n\n//.,.,.,.,.,.,. initiate search, fixing query value to global var(s) .,.,.,.,.,.,.//\n\nsearchForm.addEventListener('submit', async e => {\n  e.preventDefault();\n  queryText = searchForm.elements['search-text'].value.trim();\n  if (queryText !== '') loadMoreQueryText = queryText.slice();\n  if (queryText === '') {\n    return iziToast.warning({\n      backgroundColor: 'orange',\n      message:\n        'Sorry, there is nothing provided here to look for. Please try again!',\n      messageColor: '#fafafa',\n      messageSize: '16px',\n      messageLineHeight: 1.5,\n      position: 'topLeft',\n    });\n  }\n\n  rendered.hideLoadMoreButton();\n  rendered.clearGallery();\n  rendered.showLoader();\n  page = 1;\n\n  try {\n    const queriedImages = await getImagesByQuery(queryText, page);\n    totalPages = Math.ceil(queriedImages.totalHits / perPage);\n    searchForm.elements['search-text'].value = '';\n\n    if (queriedImages.hits.length === 0) {\n      return iziToast.error({\n        backgroundColor: '#ef4040',\n        class: 'error-message',\n        message:\n          'Sorry, there are no images matching your search query. Please try again!',\n        messageColor: '#fff',\n        messageSize: '16px',\n        messageLineHeight: 1.5,\n        position: 'topRight',\n        iconUrl: closeSVGLink,\n      });\n    }\n\n    rendered.createGallery(queriedImages.hits);\n\n    if (document.querySelector('ul.gallery').innerHTML && totalPages > 1) {\n      rendered.showLoadMoreButton();\n    } else if (totalPages === 1) {\n      iziToast.error({\n        backgroundColor: '#ef4040',\n        class: 'error-message',\n        message: \"We're sorry, but you've reached the end of search results.\",\n        messageColor: '#fff',\n        messageSize: '16px',\n        messageLineHeight: 1.5,\n        position: 'bottomRight',\n        iconUrl: closeSVGLink,\n      });\n    }\n  } catch (error) {\n    iziToast.error({\n      backgroundColor: '#380505ff',\n      message: `${error}`,\n      messageColor: '#fff',\n    });\n  } finally {\n    rendered.hideLoader();\n  }\n});\n\n//...working with Load More button (pages 2 and following) ... //\n\nloadMoreBtn.addEventListener('click', async () => {\n  page++;\n  rendered.hideLoadMoreButton();\n  rendered.showLoader();\n\n  try {\n    const moreImagesLoaded = await getImagesByQuery(loadMoreQueryText, page);\n    totalPages = Math.ceil(moreImagesLoaded.totalHits / perPage);\n    rendered.hideLoader();\n\n    if (totalPages <= page) {\n      queryText = '';\n      totalPages = NaN;\n      iziToast.error({\n        backgroundColor: '#ef4040',\n        class: 'error-message',\n        message: \"We're sorry, but you've reached the end of search results.\",\n        messageColor: '#fff',\n        messageSize: '16px',\n        messageLineHeight: 1.5,\n        position: 'bottomRight',\n        iconUrl: closeSVGLink,\n      });\n    } else {\n      rendered.showLoadMoreButton();\n    }\n    rendered.createGallery(moreImagesLoaded.hits);\n    window.scrollBy({\n      top:\n        2 *\n        document.querySelector('li.gallery-item').getBoundingClientRect()\n          .height,\n      left: 0,\n      behavior: 'smooth',\n    });\n  } catch (error) {\n    iziToast.error({\n      backgroundColor: '#380505ff',\n      message: `${error}`,\n      messageColor: '#fff',\n    });\n  } finally {\n    rendered.hideLoader();\n  }\n});\n\n/*\nУ файлі main.js напиши всю логіку роботи додатка. Виклики нотифікацій iziToast, усі перевірки на довжину масиву в отриманій відповіді робимо саме в цьому файлі. Імпортуй в нього функції із файлів pixabay-api.js та render-functions.js та викликай їх у відповідний момент.\nКористувач буде вводити рядок для пошуку в текстове поле, а за сабмітом форми необхідно виконувати HTTP-запит із цим пошуковим рядком.\n\n\n\n\n\nПри натисканні на кнопку відправки форми, додайте перевірку вмісту текстового поля на наявність порожнього рядка, щоб користувач не міг відправити запит, якщо поле пошуку порожнє.\n\nДля показу повідомлень використовуй бібліотеку iziToast.\n\n\nГалерея і картки зображень\n\nЕлемент галереї (список однотипних елементів <ul class=”gallery”>) уже має бути в HTML-документі. Після виконання HTTP-запитів у нього потрібно додавати розмітку карток зображень.\n\nІндикатор завантаження\n\nДодай елемент для сповіщення користувача про процес завантаження зображень із бекенду. Завантажувач має з’являтися перед початком HTTP-запиту та зникати після його завершення.\n\n\n\nКінець колекції\n\n\n\nУ відповіді бекенд повертає властивість totalHits — загальна кількість зображень, які відповідають критерію пошуку (для безкоштовного акаунту). Якщо користувач дійшов до кінця колекції, ховай кнопку Load more і виводь повідомлення з наступним текстом.\n\nWe're sorry, but you've reached the end of search results.\n\n\n\nЗверни увагу, що кінець колекції може бути і на 1й сторінці, і на подальших.\n\n\nПоки в галерії нема зображень, кнопка повинна бути прихована.\nПісля того як у галереї з'являються зображення, кнопка з'являється в інтерфейсі під галереєю.\nПри повторному сабміті форми кнопка спочатку ховається, а після отримання результатів запиту знову відображається за потреби.\nПеренеси індикатор завантаження під кнопку завантаження додаткових зображень.\n\n*/\n"],"names":["axios","getImagesByQuery","query","page","galleryItemLarge","SimpleLightbox","createGallery","images","markup","image","clearGallery","showLoader","hideLoader","showLoadMoreButton","hideLoadMoreButton","closeSVGLink","searchForm","loadMoreBtn","perPage","totalPages","queryText","loadMoreQueryText","e","iziToast","rendered.hideLoadMoreButton","rendered.clearGallery","rendered.showLoader","queriedImages","rendered.createGallery","rendered.showLoadMoreButton","error","rendered.hideLoader","moreImagesLoaded"],"mappings":"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"}